name: MockExam REST API CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PHP_VERSION: '8.3'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Этап 1: Тестирование и проверка качества кода
  test:
    name: Tests & Code Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: laravel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, pgsql, pdo_pgsql, bcmath, soap, intl, gd, exif, iconv, redis, swoole
          coverage: xdebug
          tools: composer:v2

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('composer.lock') }}
          restore-keys: |
            composer-${{ runner.os }}-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Setup Laravel environment
        run: |
          cp .env.example .env
          php artisan key:generate
          
      - name: Configure test database
        run: |
          echo "APP_ENV=testing" >> .env
          echo "DB_CONNECTION=pgsql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=laravel_test" >> .env
          echo "DB_USERNAME=postgres" >> .env
          echo "DB_PASSWORD=postgres" >> .env
          echo "CACHE_DRIVER=redis" >> .env
          echo "SESSION_DRIVER=redis" >> .env
          echo "QUEUE_CONNECTION=redis" >> .env
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PORT=6379" >> .env
          echo "OCTANE_SERVER=roadrunner" >> .env

      - name: Run database migrations
        run: php artisan migrate:fresh --seed --force

      - name: Check code style (Pint)
        run: |
          if [ -f "./vendor/bin/pint" ]; then
            ./vendor/bin/pint --test
          else
            echo "✅ Pint not installed, skipping code style check"
          fi

      - name: Run API tests
        run: |
          mkdir -p tests/results
          php artisan test --testsuite=Feature --stop-on-failure

      - name: Run security audit
        run: composer audit
        continue-on-error: true

      - name: Test API endpoints
        run: |
          php artisan serve --host=0.0.0.0 --port=8000 &
          sleep 5
          curl -f http://localhost:8000/up || echo "Health check endpoint not available"
          echo "✅ API tests completed"

  # Этап 2: Сборка Docker образа
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: docker/8.3/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            WWWGROUP=1000
            POSTGRES_VERSION=15

  # Этап 3: Деплой на staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: 
      name: staging
      url: ${{ vars.STAGING_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd ${{ secrets.STAGING_PATH }}
            
            # Обновляем код
            git pull origin develop
            
            # Логинимся в registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Обновляем переменные окружения
            export IMAGE_TAG=develop-${{ github.sha }}
            export REGISTRY=${{ env.REGISTRY }}
            export IMAGE_NAME=${{ env.IMAGE_NAME }}
            
            # Останавливаем старые контейнеры
            docker-compose -f docker-compose.staging.yml down
            
            # Обновляем образы
            docker-compose -f docker-compose.staging.yml pull
            
            # Запускаем новые контейнеры
            docker-compose -f docker-compose.staging.yml up -d
            
            # Ждем запуска приложения
            sleep 15
            
            # Запускаем миграции
            docker-compose -f docker-compose.staging.yml exec -T app php artisan migrate --force
            
            # Очищаем и кешируем конфигурацию
            docker-compose -f docker-compose.staging.yml exec -T app php artisan config:cache
            docker-compose -f docker-compose.staging.yml exec -T app php artisan route:cache
            docker-compose -f docker-compose.staging.yml exec -T app php artisan view:cache
            
            # Перезапускаем очереди
            docker-compose -f docker-compose.staging.yml exec -T app php artisan queue:restart
            
            # Очищаем старые образы
            docker image prune -f

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ vars.STAGING_URL }}/up || exit 1
          echo "✅ Staging deployment successful"

  # Этап 4: Деплой на production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: ${{ vars.PRODUCTION_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd ${{ secrets.PRODUCTION_PATH }}
            
            # Обновляем код
            git pull origin main
            
            # Логинимся в registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Обновляем переменные окружения
            export IMAGE_TAG=latest
            export REGISTRY=${{ env.REGISTRY }}
            export IMAGE_NAME=${{ env.IMAGE_NAME }}
            
            # Создаем бэкап базы данных
            docker-compose -f docker-compose.prod.yml exec -T postgres pg_dump -U postgres ${{ secrets.DB_DATABASE }} > backup_$(date +%Y%m%d_%H%M%S).sql
            
            # Останавливаем приложение (но не базу данных)
            docker-compose -f docker-compose.prod.yml stop app nginx redis horizon
            
            # Обновляем образы
            docker-compose -f docker-compose.prod.yml pull app
            
            # Запускаем новые контейнеры
            docker-compose -f docker-compose.prod.yml up -d
            
            # Ждем запуска приложения
            sleep 30
            
            # Запускаем миграции
            docker-compose -f docker-compose.prod.yml exec -T app php artisan migrate --force
            
            # Очищаем и кешируем конфигурацию
            docker-compose -f docker-compose.prod.yml exec -T app php artisan config:cache
            docker-compose -f docker-compose.prod.yml exec -T app php artisan route:cache
            docker-compose -f docker-compose.prod.yml exec -T app php artisan view:cache
            
            # Перезапускаем очереди
            docker-compose -f docker-compose.prod.yml exec -T app php artisan queue:restart
            
            # Очищаем старые образы
            docker image prune -f

      - name: Comprehensive health check
        run: |
          sleep 60
          curl -f ${{ vars.PRODUCTION_URL }}/up || exit 1
          curl -f ${{ vars.PRODUCTION_URL }}/health || exit 1
          echo "✅ Production deployment successful"

  # Этап 5: Уведомления
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ (needs.deploy-staging.result == 'success') || (needs.deploy-production.result == 'success') }}
        run: |
          echo "✅ Deployment successful!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Здесь можно добавить уведомления в Slack, Discord, Telegram

      - name: Notify on failure
        if: ${{ (needs.deploy-staging.result == 'failure') || (needs.deploy-production.result == 'failure') }}
        run: |
          echo "❌ Deployment failed!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          # Здесь можно добавить уведомления об ошибках