name: Deploy

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/mockexam-laravel-octane

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event.workflow_run.head_branch == 'develop' && github.event.workflow_run.conclusion == 'success'
    environment: 
      name: staging
      url: https://staging.mockexam.your-domain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials (if using EKS)
        uses: aws-actions/configure-aws-credentials@v4
        if: env.AWS_ACCESS_KEY_ID != ''
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to staging
        run: |
          # Replace image tag in deployment files
          IMAGE_TAG="${{ github.event.workflow_run.head_sha }}"
          sed -i "s|IMAGE_TAG|develop-${IMAGE_TAG}|g" k8s/staging/deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/staging/
          
          # Wait for deployment to complete
          kubectl rollout status deployment/mockexam-app -n staging --timeout=300s
          
          echo "‚úÖ Staging deployment completed"

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Run basic health checks
          curl -f https://staging.mockexam.your-domain.com/health || exit 1
          curl -f https://staging.mockexam.your-domain.com/api/health || exit 1
          
          echo "‚úÖ Smoke tests passed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.workflow_run.head_branch == 'main' && github.event.workflow_run.conclusion == 'success'
    environment: 
      name: production
      url: https://mockexam.your-domain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials (if using EKS)
        uses: aws-actions/configure-aws-credentials@v4
        if: env.AWS_ACCESS_KEY_ID != ''
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to production
        run: |
          # Replace image tag in deployment files
          IMAGE_TAG="${{ github.event.workflow_run.head_sha }}"
          sed -i "s|IMAGE_TAG|main-${IMAGE_TAG}|g" k8s/production/deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/production/
          
          # Wait for deployment to complete
          kubectl rollout status deployment/mockexam-app -n production --timeout=600s
          
          echo "‚úÖ Production deployment completed"

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 60
          
          # Run comprehensive health checks
          curl -f https://mockexam.your-domain.com/health || exit 1
          curl -f https://mockexam.your-domain.com/api/health || exit 1
          
          # Test critical endpoints
          curl -f https://mockexam.your-domain.com/api/courses || exit 1
          
          echo "‚úÖ Production smoke tests passed"

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify Slack on success
        if: ${{ (needs.deploy-staging.result == 'success') || (needs.deploy-production.result == 'success') }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            üöÄ MockExam deployment successful!
            Branch: ${{ github.event.workflow_run.head_branch }}
            Commit: ${{ github.event.workflow_run.head_sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: ${{ (needs.deploy-staging.result == 'failure') || (needs.deploy-production.result == 'failure') }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ‚ùå MockExam deployment failed!
            Branch: ${{ github.event.workflow_run.head_branch }}
            Commit: ${{ github.event.workflow_run.head_sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
