name: Deploy

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/mockexam-laravel-octane

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event.workflow_run.head_branch == 'develop' && github.event.workflow_run.conclusion == 'success'
    environment: 
      name: staging
      url: https://staging.mockexam.your-domain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Your staging deployment commands for Docker Compose or another service go here
          echo "Staging deployment completed"

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Run basic health checks
          curl -f https://staging.mockexam.your-domain.com/health || exit 1
          curl -f https://staging.mockexam.your-domain.com/api/health || exit 1
          
          echo "‚úÖ Smoke tests passed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.workflow_run.head_branch == 'main' && github.event.workflow_run.conclusion == 'success'
    environment: 
      name: production
      url: https://mockexam.your-domain.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Your production deployment commands for Docker Compose or another service go here
          echo "Production deployment completed"

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 60
          
          # Run comprehensive health checks
          curl -f https://mockexam.your-domain.com/health || exit 1
          curl -f https://mockexam.your-domain.com/api/health || exit 1
          
          # Test critical endpoints
          curl -f https://mockexam.your-domain.com/api/courses || exit 1
          
          echo "‚úÖ Production smoke tests passed"

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify Slack on success
        if: ${{ (needs.deploy-staging.result == 'success') || (needs.deploy-production.result == 'success') }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            üöÄ MockExam deployment successful!
            Branch: ${{ github.event.workflow_run.head_branch }}
            Commit: ${{ github.event.workflow_run.head_sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: ${{ (needs.deploy-staging.result == 'failure') || (needs.deploy-production.result == 'failure') }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ‚ùå MockExam deployment failed!
            Branch: ${{ github.event.workflow_run.head_branch }}
            Commit: ${{ github.event.workflow_run.head_sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
